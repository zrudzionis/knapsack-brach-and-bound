#!/usr/bin/python
# -*- coding: utf-8 -*-

#import pudb; pu.db
import math
import collections
from collections import namedtuple

Item = namedtuple('Item', ['value', 'weight', 'index'])
taken = []
items = []

def goodRate(item1, item2):
    rate1 = item1.value/item1.weight 
    rate2 = item2.value/item2.weight
    order = -1; #-1 highest rate first
    if rate1 > rate2:
        return order
    elif rate1 < rate2:
        return -order
    else:
        return 0



itemsCount = 0 
estimateFraction = 0
estimateValue = 0
estimateWeight = 0
estimateCapacity = 0
#index to last taken whole item
estimateLastIndex = 0
bestValue = 0


def calcFraction(capacity, index):
    return math.ceil(items[index].value*capacity/items[index].weight)

def findFraction(capacity):

    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue
    index = estimateLastIndex + 1
    while index < itemsCount and not taken[index] == 0:
        index += 1
    if index < itemsCount:
        fraction = calcFraction(capacity, index)
    else:
        fraction = 0
    return fraction

def adjustLeft():

    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue
    #adjust taken items according to new weight
    while estimateWeight > estimateCapacity:
        if taken[estimateLastIndex] == 0:
            estimateValue -= items[estimateLastIndex].value
            estimateWeight -= items[estimateLastIndex].weight
        estimateLastIndex -= 1
    #find new fraction
    estimateFraction = findFraction(estimateCapacity - estimateWeight)
    estimateValue += estimateFraction

def adjustRight():

    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue
    #add items until we can add only fractional part
    tmpIndex = estimateLastIndex + 1
    while tmpIndex < itemsCount:
        weight = items[tmpIndex].weight
        if taken[tmpIndex] == 0 and weight + estimateWeight <= estimateCapacity:
            estimateValue += items[tmpIndex].value
            estimateWeight += items[tmpIndex].weight
            estimateLastIndex = tmpIndex
        tmpIndex += 1
    #find fraction
    estimateFraction = findFraction(estimateCapacity - estimateWeight)
    estimateValue += estimateFraction;

def calcEstimate(itemIndex, wasTaken):
    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue

    w = items[itemIndex].weight
    v = items[itemIndex].value
    #decided to take
    if taken[itemIndex] == 1:
        estimateCapacity -= w
        if itemIndex >= estimateLastIndex + 1:
            estimateValue -= estimateFraction
            estimateFraction = 0
            estimateValue += v
            #capacity changed so we need to adjust estimateWeight so that it would match current capacity 
            adjustLeft()
        elif itemIndex < estimateLastIndex + 1:
            #svoris priklauso estimate rinkiniui, todėl turim jį pašalint
            estimateWeight -= w
                
    #decided not to take
    elif taken[itemIndex] == -1:
        if itemIndex <= estimateLastIndex:
            estimateValue -= estimateFraction
            estimateFraction = 0
            estimateValue -= v;
            estimateWeight -= w
            adjustRight()
        elif itemIndex == estimateLastIndex + 1:
            estimateValue -= estimateFraction
            estimateFraction = 0
            adjustRight()
    #reverse changes
    elif taken[itemIndex] == 0:
            if wasTaken:
                estimateCapacity += w;
                if itemIndex >= estimateLastIndex + 1:
                    estimateValue -= estimateFraction
                    estimateFraction = 0
                    estimateValue -= v
                    adjustRight()
                elif itemIndex < estimateLastIndex + 1:
                    estimateWeight += w;
            elif not wasTaken:
                if itemIndex <= estimateLastIndex:
                    estimateValue -= estimateFraction
                    estimateFraction = 0
                    estimateValue += v
                    estimateWeight += w
                    adjustLeft()
                elif itemIndex == estimateLastIndex + 1:
                    estimateValue -= estimateFraction
                    estimateFraction = 0
                    adjustLeft()

def solve(itemIndex, value, capacity):

    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue

    w = items[itemIndex].weight
    v = items[itemIndex].value
    for i in range(1, -3, -2):
        if (i == 1):
            #take
            if (capacity >= w):
                taken[itemIndex] = i
                calcEstimate(itemIndex, True)

                if (bestValue < value + v):
                    bestValue = value + v
                print v, w
                print 'take ', itemIndex, ' estimate: ', estimateValue
                print 'fraction: ', estimateFraction, ' capacity: ', estimateCapacity, ' weight: ', estimateWeight, ' lastIndex: ', estimateLastIndex
                if (estimateValue > bestValue):
                    solve(itemIndex+1, value + v, capacity - w)
                taken[itemIndex] = 0
                calcEstimate(itemIndex, True)

        elif (i == -1):
            #not take
            taken[itemIndex] = i
            calcEstimate(itemIndex, False)

            print v, w
            print 'not take ', itemIndex, 'estimate: ', estimateValue
            print 'fraction: ', estimateFraction, ' capacity: ', estimateCapacity, ' weight: ', estimateWeight, ' lastIndex: ', estimateLastIndex
            if (estimateValue > bestValue):
                solve(itemIndex+1, value, capacity)
            taken[itemIndex] = 0
            calcEstimate(itemIndex, False)
            

def solveIt(inputData):
    # Modify this code to run your optimization algorithm

    
    global itemsCount 
    global estimateFraction
    global estimateValue
    global estimateWeight
    global estimateCapacity
    global estimateLastIndex
    global bestValue
    
    # parse the input
    lines = inputData.split('\n')

    firstLine = lines[0].split()
    itemsCount = int(firstLine[0])
    capacity = int(firstLine[1])
    estimateCapacity = capacity
    value = 0;

    for i in range(1, itemsCount+1):
        taken.append(0)
        line = lines[i]
        parts = line.split()
        items.append(Item(int(parts[0]), int(parts[1]), int(i - 1)))
        #print items[i - 1].value, items[i - 1].weight, items[i - 1].index
        #values.append(int(parts[0]))
        #weights.append(int(parts[1]))

    items.sort(cmp=goodRate)
    #calculate initial estimate value
    capac = capacity
    for i in range(0, itemsCount):
        if (capac <= 0):
            break
        else:
            if (capac >= items[i].weight):
                estimateValue += items[i].value
                capac -= items[i].weight
                estimateWeight += items[i].weight
                estimateLastIndex = i
            else:
                estimateFraction = calcFraction(capac, i)
                estimateValue = estimateValue + estimateFraction 
                break

    print 'start estimate value: ', estimateValue
    for i in range(1, itemsCount+1):
        print items[i - 1].value, items[i - 1].weight, items[i - 1].index
    
    solve(0, 0, capacity)
    print 'bestValue: ', bestValue
    
    # prepare the solution in the specified output format
    outputData = str(value) + ' ' + str(1) + '\n'
    outputData += ' '.join(map(str, taken))
    #return outputData


import sys

if __name__ == '__main__':
    if len(sys.argv) > 1:
        fileLocation = sys.argv[1].strip()
        inputDataFile = open(fileLocation, 'r')
        inputData = ''.join(inputDataFile.readlines())
        inputDataFile.close()
        print solveIt(inputData)
    else:
        print 'This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/ks_4_0)'

